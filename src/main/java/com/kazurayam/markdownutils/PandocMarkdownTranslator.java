package com.kazurayam.markdownutils;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PandocMarkdownTranslator {

    /**
     * current working directory
     */
    private final Path cwd;

    public PandocMarkdownTranslator() {
        cwd = Paths.get(System.getProperty("user.dir"));
    }

    public static void main(String[] args) throws IOException {
        PandocMarkdownTranslator translator = new PandocMarkdownTranslator();
        if (args.length == 1) {
            translator.translateFile(args[0]);
        } else if (args.length == 2) {
            translator.translateFile(args[0], args[1]);
        } else {
            System.out.println("Usage: java -jar MarkdownUtils-x.x.x.jar README.md");
            System.out.println("    or java -jar MarkdownUtils-x.x.x.jar README.md temp.md");
            System.exit(1);
        }
    }

    public void translateFile(String inputFilePath, String outputFilePath) throws IOException {
        Objects.requireNonNull(inputFilePath);
        Objects.requireNonNull(outputFilePath);
        Path input = cwd.resolve(inputFilePath);
        if (!Files.exists(input)) {
            throw new FileNotFoundException(input + " is not found");
        }
        Path output = cwd.resolve(outputFilePath);
        Path outputParent = output.getParent();
        if (!Files.exists(outputParent)) {
            Files.createDirectories(outputParent);
        }
        this.translateFile(input, output);
    }

    public void translateFile(String filePath) throws IOException {
        Objects.requireNonNull(filePath);
        Path target = cwd.resolve(filePath);
        if (!Files.exists(target)) {
            throw new FileNotFoundException(target + " is not found");
        }
        this.translateFile(target);
    }

    public void translateFile(Path target) throws IOException {
        Path tempFile = Files.createTempFile(PandocMarkdownTranslator.class.getSimpleName(), "");
        // translate the input into the temporary file
        this.translateFile(target, tempFile);
        // copy the translated text over the original
        Files.copy(tempFile, target, StandardCopyOption.REPLACE_EXISTING);
    }

    public void translateFile(Path input, Path output) throws IOException {
        Reader reader = new InputStreamReader(
                Files.newInputStream(input.toFile().toPath()), StandardCharsets.UTF_8);
        Writer writer = new OutputStreamWriter(
                Files.newOutputStream(output.toFile().toPath()), StandardCharsets.UTF_8);
        this.translateContent(reader, writer);
        reader.close();
        writer.flush();
        writer.close();
    }

    public void translateContent(Reader reader, Writer writer) throws IOException {
        Objects.requireNonNull(reader);
        Objects.requireNonNull(writer);
        BufferedReader br = new BufferedReader(reader);
        PrintWriter pw = new PrintWriter(new BufferedWriter(writer));
        boolean inPrologue = true;
        String line;
        while ((line = br.readLine()) != null) {
            if (line.startsWith("#")) {
                inPrologue = false;
            }
            if (inPrologue) {
                String translated = this.translateTocLink(line);
                pw.println(translated);
            } else {
                pw.println(line);
            }
        }
        pw.flush();
    }

    /**
     * Translate a line of "Table of content" generated by Pandoc into
     * a string compliant to GitHub Flavoured Markdown. For example,
     * I have a line:
     *
     * <PRE>
     * -    [My previous solution](#_my_previous_solution)
     * </PRE>
     * <p>
     * I want to translate this into
     *
     * <PRE>
     * -    [My previous solution](#my-previous-solution)
     * </PRE>
     *
     * @param line a line from README.md file
     */
    String translateTocLink(String line) {
        Matcher m1 = PATTERN_AS_MD.matcher(line);
        if (m1.matches()) {
            return m1.group(1) + "(#" + m1.group(2).replace("_", "-") + ")";
        } else {
            Matcher m2 = PATTERN_AS_HTML_ANCHOR.matcher(line);
            if (m2.matches()) {
                // " - <a href=\"#" ==  m2.group(1)
                // "_foo_bar" == m2.group(2)
                // "\" id=\"toc-" == m.group(3)
                // "_foo_bar" == m.group(4)
                // "\">baz</a>" == m.group(5)
                StringBuilder sb = new StringBuilder();
                sb.append(m2.group(1));
                sb.append(underline2hyphen(m2.group(2)));
                sb.append(m2.group(3));
                sb.append(underline2hyphen(m2.group(4)));
                sb.append(m2.group(5));
                return sb.toString();
            } else {
                return line;
            }
        }
    }

    /*
     * "_foo_bar" -> "foo-bar"
     */
    static final String underline2hyphen(String s) {
        if (s.startsWith("_")) {
            return s.substring(1).replaceAll("_", "-");
        } else {
            return s.replaceAll("_", "-");
        }
    }

    static final String PTN_LEAD = "\\s*-\\s+";
    static final String PTN_MD_LABEL = "[^]]*";
    static final String PTN_MD_HEADER = "(" + PTN_LEAD + "\\[" + PTN_MD_LABEL + "]" + ")";
    static final String PTN_MD_ID = "[^)]*";
    static final String PTN_MD_LINK = "\\(#_(" + PTN_MD_ID + ")\\)";

    /**
     * a Regular Expression that matches a string like
     * <PRE>
     * -    [foo](#_bar_baz)
     * </PRE>
     */
    static final Pattern PATTERN_AS_MD =
            Pattern.compile("^" + PTN_MD_HEADER + PTN_MD_LINK + "$");


    /*
     * a Regular Expression that matches a string line, such as
     * <PRE>
     *     - <a href="#_foo_bar" id="toc-_foo_bar">baz</a>
     * </PRE>
     *
     * This pattern will be used to translate the string into
     * <PRE>
     *     - <a href="#foo-bar" id="toc-foo-bar">baz</a>
     * </PRE>
     */
    static final String PTN_VAL = "[^\\\"]+";

    static final Pattern PATTERN_AS_HTML_ANCHOR =
            Pattern.compile("^(" + PTN_LEAD + "<a href=\"#" + ")(" + PTN_VAL +
                    ")(\"" + "\\s+" + "id=\"toc-" + ")(" + PTN_VAL + ")(\".+)$");
}