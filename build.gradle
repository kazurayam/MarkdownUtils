plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group 'com.kazurayam'
version '0.2.0'

ext.isReleaseVersion = ! version.endsWith("SNAPSHOT")

sourceCompatibility = "1.8"
targetCompatibility = "1.8"
def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-simple:1.7.25'

    testImplementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
}

test {
    useJUnitPlatform()
}

javadoc {
    options.encoding = 'UTF-8'
    options.locale = "en_US"
}

task copyJavadoc(type:Copy) {
    from 'build/docs/javadoc'
    into 'docs/api'
}
javadoc.finalizedBy copyJavadoc

java {
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar
}

jar {
    manifest {
        attributes 'Main-Class': 'com.kazurayam.markdownutils.PandocMarkdownTranslator'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                groupId = project.group
                name = project.rootProject.name
                description = 'a java classes that translates Markdown files (README.md etc) into some other format'
                url = 'https://kazurayam.github.io/MarkdownUtils/'
                from components.java
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org.licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kazurayam'
                        name = 'URAYAMA,kazuaki'
                        email = 'kazuaki.urayama@gmail.com'
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/kazurayam/${project.rootProject.name}.git"
                    developerConnection = "scm:git:git@github.com:kazurayam/${project.rootProject.name}.git"
                    url = "https://github.com/kazurayam/${project.rootProject.name}"
                }
            }
        }
    }
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo: snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }
}


signing {
    sign publishing.publications.mavenJava
}
// I do not want to sign the SNAPSHOT
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}


task publishdocs {
    doLast {
        exec {
            workingDir './docs'
            commandLine './indexconv.sh', '-t'
        }
        exec {
            workingDir '.'
            commandLine 'git', 'add', 'docs/'
        }
        exec {
            workingDir '.'
            commandLine 'git', 'commit', '-m', 'update the docs/'
        }
        exec {
            workingDir '.'
            commandLine 'git', 'push'
        }
    }
}